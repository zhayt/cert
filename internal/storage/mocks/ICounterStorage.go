// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ICounterStorage is an autogenerated mock type for the ICounterStorage type
type ICounterStorage struct {
	mock.Mock
}

// DecreaseCounter provides a mock function with given fields: ctx, key, val
func (_m *ICounterStorage) DecreaseCounter(ctx context.Context, key string, val int64) error {
	ret := _m.Called(ctx, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCounter provides a mock function with given fields: ctx, key
func (_m *ICounterStorage) GetCounter(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseCounter provides a mock function with given fields: ctx, key, val
func (_m *ICounterStorage) IncreaseCounter(ctx context.Context, key string, val int64) error {
	ret := _m.Called(ctx, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICounterStorage creates a new instance of ICounterStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICounterStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICounterStorage {
	mock := &ICounterStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
